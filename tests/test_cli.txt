>>> from subprocess import check_output, run
>>> sample = 'My var-name'

Test module call:

>>> check_output(['python', '-m', 'caseutil', '-c', 'const', sample])
b'MY_VAR_NAME\n'

Test --version option:

>>> import caseutil
>>> out = check_output(['caseutil', '--version'])
>>> out.decode('ascii').strip() == caseutil.__version__
True

Test all case conversions:

>>> check_output(['caseutil', '-c', 'ada', sample])
b'My_Var_Name\n'
>>> check_output(['caseutil', '-c', 'camel', sample])
b'myVarName\n'
>>> check_output(['caseutil', '-c', 'cobol', sample])
b'MY-VAR-NAME\n'
>>> check_output(['caseutil', '-c', 'const', sample])
b'MY_VAR_NAME\n'
>>> check_output(['caseutil', '-c', 'kebab', sample])
b'my-var-name\n'
>>> check_output(['caseutil', '-c', 'lower', sample])
b'my var name\n'
>>> check_output(['caseutil', '-c', 'pascal', sample])
b'MyVarName\n'
>>> check_output(['caseutil', '-c', 'sentence', sample])
b'My var name\n'
>>> check_output(['caseutil', '-c', 'snake', sample])
b'my_var_name\n'
>>> check_output(['caseutil', '-c', 'title', sample])
b'My Var Name\n'
>>> check_output(['caseutil', '-c', 'train', sample])
b'My-Var-Name\n'
>>> check_output(['caseutil', '-c', 'upper', sample])
b'MY VAR NAME\n'

Test case detection:

>>> check_output(['caseutil', '-d', 'snake_case'])
b'snake\n'

>>> check_output(['caseutil', '-d', 'lowercase'])
b'camel kebab lower snake\n'

>>> check_output(['caseutil', '-d', 'Titlecase'])
b'ada pascal sentence title train\n'

Mixed case:

>>> check_output(['caseutil', '-d', 'title Case'])
b'\n'

Test multiline input:

>>> multisample = 'some phrase 1\n somePhrase2'
>>> check_output(['caseutil', '-c', 'const', multisample])
b'SOME_PHRASE_1\nSOME_PHRASE2\n'
>>> check_output(f'echo "{multisample}" | caseutil -c const', shell=True)
b'SOME_PHRASE_1\nSOME_PHRASE2\n'

Test missing -c or -d:

>>> res = run(['caseutil', sample], capture_output=True)
>>> res.returncode != 0
True
>>> b'error: one of the arguments -c/--convert -d/--detect is required' in res.stderr
True

Test undefined option:

>>> res = run(['caseutil', '-d', '--undefined', sample], capture_output=True)
>>> res.returncode != 0
True
>>> b'error: unrecognized arguments: --undefined' in res.stderr
True
