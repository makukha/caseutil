version: '3'

vars:
  GITHUB_REPO: makukha/caseutil
  GET_PYTHON_VERSIONS: tox --listenvs | sed -e 's/^py//' | xargs echo

tasks:

  init:
    desc: Initialize dev environment.
    cmds:
      - brew bundle
      - pyenv install --skip-existing $(pyenv local)
      - task: init:python-versions

  init:python-versions:
    internal: true
    sources:
      - tox.ini
    vars:
      PYTHON_VERSIONS: {sh: '{{.GET_PYTHON_VERSIONS}}'}
    cmds:
      - cmd: pyenv install --skip-existing {{.ITEM}}
        for: {var: PYTHON_VERSIONS}


  install:
    desc: Install dev python environment.
    cmds:
      - pdm install --check --dev

  lint:
    desc: Run linters and code formatters.
    cmds:
      - ruff check

  gen:test_readme:
    internal: true
    sources: [README.md]
    generates: [tests/test_readme.txt]
    cmds:
      - pdm run python bin/dev.py get-markdown-code --lang=doctest README.md
          > tests/test_readme.txt

  test:
    desc: Run tests.
    deps: [install]
    vars:
      VERSION: {sh: pdm show --version}
    cmds:
      - pdm build
      - task: gen:test_readme
      - tox run-parallel --installpkg dist/caseutil-{{.VERSION}}-py2.py3-none-any.whl

  version:
    desc: Bump project version. Use task version -- patch|minor|major|...
    cmds:
      - pdm run bump-my-version bump {{.CLI_ARGS}}

  publish:
    desc: Publish package on PyPi.
    preconditions:
      - test $(git rev-parse --abbrev-ref HEAD) = main
    cmds:
      - pdm publish

  check:python-versions:
    desc: Check python versions available to pyenv.
    vars:
      PYTHON_VERSIONS: {sh: '{{.GET_PYTHON_VERSIONS}}'}
    cmds:
      - brew upgrade --quiet pyenv
      - cmd:
          export V="$(echo {{.ITEM}} | cut -d. -f1-2)";
          echo "{{.ITEM}}" "--" "$(
            pyenv latest --known $V 2>/dev/null
            || pyenv install --list | sed -ne "s|  $V|$V|p" | xargs
          )"
        for: {var: PYTHON_VERSIONS}
        silent: true

  docs:scorecard:
    desc: Update security scorecard
    vars:
      GITHUB_TOKEN: {sh: keyring get token.github.caseutil scorecard}
    env:
      GITHUB_TOKEN: '{{.GITHUB_TOKEN}}'
    cmds:
      - scorecard --repo={{.GITHUB_REPO}}
