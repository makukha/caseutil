from enum import Enum
from typing import List, Tuple, Union

class Case(str, Enum):
    ADA = 'ada'
    CAMEL = 'camel'
    COBOL = 'cobol'
    CONST = 'const'
    KEBAB = 'kebab'
    LOWER = 'lower'
    PASCAL = 'pascal'
    SENTENCE = 'sentence'
    SNAKE = 'snake'
    TITLE = 'title'
    TRAIN = 'train'
    UPPER = 'upper'

CASES: Tuple[str, ...]

def is_case(case: Union[Case, str], text: str) -> bool: ...
def to_case(case: Union[Case, str], text: str) -> str: ...
def get_cases(text: str) -> Tuple[str, ...]: ...
def tokenize(text: str) -> str: ...
def words(text: str) -> List[str]: ...
def is_ada(text: str) -> bool: ...
def to_ada(text: str) -> str: ...
def is_camel(text: str) -> bool: ...
def to_camel(text: str) -> str: ...
def is_cobol(text: str) -> bool: ...
def to_cobol(text: str) -> str: ...
def is_const(text: str) -> bool: ...
def to_const(text: str) -> str: ...
def is_kebab(text: str) -> bool: ...
def to_kebab(text: str) -> str: ...
def is_lower(text: str) -> bool: ...
def to_lower(text: str) -> str: ...
def is_pascal(text: str) -> bool: ...
def to_pascal(text: str) -> str: ...
def is_sentence(text: str) -> bool: ...
def to_sentence(text: str) -> str: ...
def is_snake(text: str) -> bool: ...
def to_snake(text: str) -> str: ...
def is_title(text: str) -> bool: ...
def to_title(text: str) -> str: ...
def is_train(text: str) -> bool: ...
def to_train(text: str) -> str: ...
def is_upper(text: str) -> bool: ...
def to_upper(text: str) -> str: ...
